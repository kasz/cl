;; zadalem sobie trud przetlumaczenia gry na polski, ale w zwiazku z innymi zasadami
;; gramatyki angielskiej gra moze nie dokonca byc jasna
(defparameter *nodes* '((salon (znajdujesz sie w salonie.
				czarodziej glosno chrapie na kanapie.))
			(ogrod (jestes w pieknym ogrodzie.
				przed toba znajduje sie studnia.))
			(strych (jestes na strychu.
				 w rogu znajduje sie olbrzym trzymajacy pochodnie))))
(defun describe-location (location nodes)
  (cadr (assoc location nodes)))
(defparameter *edges* '((salon (ogrod zachod drzwi)
			       (strych gore drabina))
			(ogrod (salon wschod drzwi))
			(strych (salon dol drabina))))
(defun describe-path (edge)
  `(widac ,(caddr edge) na ,(cadr edge) stad.))
(defun describe-paths (location edges)
  (apply #'append (mapcar #'describe-path (cdr (assoc location edges)))))
(defparameter *objects* '(whiski kosz zaba lancuch))
(defparameter *object-locations* '((whiski salon)
				   (kosz salon)
				   (lancuch ogrod)
				   (zaba ogrod)))
(defun objects-at (loc objs obj-locs)
  (labels ((at-loc-p (obj)
	     (eq (cadr (assoc obj obj-locs)) loc)))
    (remove-if-not #'at-loc-p objs)))
(defun describe-objects (loc objs obj-locs)
  (labels ((describe-object (obj)
	     `(widzisz ,obj na podlodze.)))
    (apply #'append (mapcar #'describe-object (objects-at loc objs obj-locs)))))
(defparameter *location* 'salon)
(defun look ()
  (append (describe-location *location* *nodes*)
	  (describe-paths *location* *edges*)
	  (describe-objects *location* *objects* *object-locations*)))
(defun walk (direction)
  (let ((next (find direction
		    (cdr (assoc *location* *edges*))
		    :key #'cadr)))
;;     (if next
;; 	(progn (setf *location* (car next))
;; 	       (look))
;; 	'(nie mozesz tedy isc))))
    (cond (next (setf *location* (car next))
		 (look))
	   (t '(nie mozesz tedy isc)))))
(defun pickup (object)
  (cond ((member object (objects-at *location* *objects* *object-locations*))
	 (push (list object 'cialo) *object-locations*)
	 `(teraz posiadasz ,object))
	(t '(nie mozesz tego wziac.))))
(defun inventory ()
  (cons 'przedmioty- (objects-at 'cialo *objects* *object-locations*)))
;; to moj dodatek, zwiazany z ograniczeniami wyswietalania dlugich list
;; (ale problem jest albo tylko windowsowy, albo tyczy sie starej wersji emacsa/lispa
(defun look2 ()
   (labels ((princ-space (txt)
	      (princ txt)
	      (princ #\space)))
     (mapcar #'princ-space (look))))
(defun game-read ()
  (let ((cmd (read-from-string
	      (concatenate 'string "(" (read-line) ")"))))
    (flet ((quote-it (x)
	     (list 'quote x)))
      (cons (car cmd) (mapcar #'quote-it (cdr cmd))))))
(defparameter *allowed-commands* '(look look2 walk pickup inventory))
(defun game-eval (sexp)
  (if (member (car sexp) *allowed-commands*)
      (eval sexp)
      '(nie znam tej komendy)))
(defun tweak-text (lst caps lit)
  (when lst
    (let ((item (car lst))
	  (rest (cdr lst)))
      (cond ((eq item #\space) (cons item (tweak-text rest caps lit)))
	    ((member item '(#\? #\! #\.)) (cons item (tweak-text rest t lit)))
	    ((eq item #\") (tweak-text rest caps (not lit)))
	    (lit (cons item (tweak-text rest nil lit)))
	    ((or caps lit) (cons (char-upcase item) (tweak-text rest nil lit)))
	    (t (cons (char-downcase item) (tweak-text rest nil nil)))))))
(defun game-print (lst)
  (princ (coerce (tweak-text (coerce (string-trim "() "
						  (prin1-to-string lst))
				     'list)
			     t
			     nil)
		 'string))
  (fresh-line))
(defun game-repl ()
  (let ((cmd (game-read)))
    (unless (eq (car cmd) 'quit)
      (game-print (game-eval cmd))
      (game-repl))))